<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iTin.Core.Models</name>
    </assembly>
    <members>
        <member name="T:iTin.Core.Models.BaseModel`1">
            <summary>
            Base class for model elements.<br/>
            Implements functionality to record and read configuration files.
            </summary>
            <typeparam name="T">Represents a model node type</typeparam>
        </member>
        <member name="P:iTin.Core.Models.BaseModel`1.PropertiesSpecified">
            <summary>
            Gets a value that tells the serializer if the referenced item is to be included.
            </summary>
            <value>
            <b>true</b> if the serializer has to include the element; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.BaseModel`1.Properties">
            <summary>
            Gets or sets a reference to user-defined property list for this element.
            </summary>
            <value>
            List of user-defined properties available for this element.
            </value>
        </member>
        <member name="P:iTin.Core.Models.BaseModel`1.IsDefault">
            <summary>
            When overridden in a derived class, gets a value indicating whether this instance contains the default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.Deserialize(System.String,iTin.Core.Models.KnownFileFormat)">
            <summary>
            Deserializes the input string into specified model type. By default, if not specified, it will be used in <b>Xml</b> format.
            </summary>
            <param name="value">Input string</param>
            <param name="format">Input file format</param>
            <returns>
            A new model reference of type <b>T</b>.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.Deserialize(System.IO.Stream,iTin.Core.Models.KnownFileFormat)">
            <summary>
            Deserializes the input stream into specified model type. By default, if not specified, it will be used in <b>Xml</b> format.
            </summary>
            <param name="stream">Input stream</param>
            <param name="format">Input file format</param>
            <returns>
            A new model reference of type <b>T</b>.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.LoadFromFile(System.String,iTin.Core.Models.KnownFileFormat)">
            <summary>
            Returns a reference from a file in <b>Xml</b> or <b>Json</b> format. By default, if it is not specified, it is understood that you are trying to obtain the reference from an <b>Xml</b> file.
            The use of the <b>~</b> character is allowed to indicate relative paths.
            </summary>
            <param name="fileName">Absolute or relative input file path</param>
            <param name="format">Input file format</param>
            <returns>
            A new reference that constains the model.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.LoadFromUri(System.Uri,iTin.Core.Models.KnownFileFormat)">
            <summary>
            Returns a reference from a uri in <b>Xml</b> or <b>Json</b> format.
            </summary>
            <param name="pathUri">File path</param>
            <param name="format">Input file format</param>
            <returns>
            A new reference that constains the model.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.SaveToFile(System.String,iTin.Core.Models.KnownFileFormat,iTin.Core.Models.ModelSaveOptions)">
            <summary>
            Save this model in a <b>Xml</b> or <b>Json</b> file. By default, if not specified, it will be saved in <b>Xml</b> format.
            You can indicate whether to automatically create the destination path if it does not exist. By default it will try to create the destination path.
            The use of the <b>~</b> character is allowed to indicate relative paths.
            </summary>
            <param name="fileName">Destination file path. Absolute or relative (~) paths are allowed</param>
            <param name="format">Output file format</param>
            <param name="options">Output model save options</param>
            <returns>
            <para>
            A <see cref="T:iTin.Core.ComponentModel.Results.BooleanResult"/> which implements the <see cref="T:iTin.Core.ComponentModel.IResult"/> interface reference that contains the result of the operation, to check if the operation is correct, the <b>Success</b>
            property will be <b>true</b> and the <b>Value</b> property will contain the value; Otherwise, the the <b>Success</b> property
            will be false and the <b>Errors</b> property will contain the errors associated with the operation, if they have been filled in.
            </para>
            <para>
            The type of the return value is <see cref="T:System.Boolean"/>, which contains the operation result
            </para>
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.Serialize(iTin.Core.Models.ModelSaveOptions,iTin.Core.Models.KnownFileFormat)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains current model serialized in a <b>Xml</b> or <b>Json</b> format. By default, if not specified, it will be saved in <b>Xml</b> format.
            </summary>
            <param name="options">Output model save options</param>
            <param name="format">Output file format</param>
            <returns>
            A <see cref="T:System.String"/> that contains serialized model.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.BaseModel`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current object.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Collections.BaseComplexModelCollection`3">
            <inheritdoc/>
            <summary>
            A Specialization of <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> class.<br/>.
            Which acts as the base class for nodes of model which are of collection type
            </summary>
            <typeparam name="TItem">The type of elements in the list.</typeparam>
            <typeparam name="TParent">The owner type of list.</typeparam>
            <typeparam name="TSearch">The type of search element.</typeparam>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseComplexModelCollection`3.#ctor(`1)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Collections.BaseComplexModelCollection`3"/> class.
            </summary>
            <param name="parent">Parent type.</param>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseComplexModelCollection`3.Item(`2)">
            <summary>
            Gets or sets the element specified by <paramref name="value"/>.
            </summary>
            <value>
            Item
            </value>
            <param name="value">Zero-based index of the element to get or set.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseComplexModelCollection`3.Contains(`2)">
            <summary>
            Determines whether an element is in the <see cref="T:iTin.Core.Models.Collections.BaseComplexModelCollection`3"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:iTin.Core.Models.Collections.BaseComplexModelCollection`3"/>.</param>
            <returns>
            <b>true</b> if <paramref name="value"/> is found in the <see cref="T:iTin.Core.Models.Collections.BaseComplexModelCollection`3"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseComplexModelCollection`3.GetBy(`2)">
            <summary>
            Returns the element specified.
            </summary>
            <param name="value">The object to locate in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.</param>
            <returns>
            Returns the specified element.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2">
            <summary>
            Represents a strongly typed list of model objects that can be accessed by index, allow defines type of parent.<br/>
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="TItem">The type of elements in the list.</typeparam>
            <typeparam name="TParent">The owner type of list.</typeparam>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> class.
            </summary>
            <param name="parent">Parent type.</param>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Count">
            <inheritdoc/>
            <summary>
            Gets the number of elements contained in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.IsReadOnly">
            <inheritdoc/>
            <summary>
            Gets a value indicating whether the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> is read-only.
            </summary>
            <value>
            Always is <b>false</b>
            </value>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Parent">
            <summary>
            Gets a reference to the owner of the collection
            </summary>
            <value>
            Owner collection
            </value>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.IsDefault">
            <inheritdoc />
            <summary>
            When overridden in a derived class, gets a value indicating whether this instance contains the default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.List">
            <summary>
            Gets a reference to the inner list.
            </summary>
            <value>
            The inner list.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <value>
            Item at the specified index.
            </value>
            <param name="index">Zero-based index of the element to get or set.</param>
            <returns>
            the value
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and is readonly.</exception>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Add(`0)">
            <inheritdoc />
            <summary>
            Adds an object to the end of the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.</param>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Clear">
            <inheritdoc />
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Contains(`0)">
            <inheritdoc/>
            <summary>
            Determines whether an element is in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>. The value can be <strong>null</strong> for reference types.</param>
            <returns>
            <b>true</b> if <paramref name="item"/> is found in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>; otherwise, <strong>false</strong>.
            </returns>
            <remarks>
            This method determines equality by using the default equality comparer, as defined by the object's implementation of the <see cref="M:System.IEquatable`1.Equals(`0)"/> method for TItem (the type of values in the list).
            </remarks>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
            <summary>
            Copies the entire <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</param>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TItem.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.GetEnumerator">
            <inheritdoc/>
            <summary>
            Returns an enumerator that iterates through the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.IndexOf(`0)">
            <inheritdoc/>
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>. The value can be <b>null</b> for reference types.</param>
            <returns>
            The zero-based index of the first occurrence of item within the entire <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Insert(System.Int32,`0)">
            <inheritdoc/>
            <summary>
            Inserts an item to the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be <b>null</b> for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 - or - index is greater than <see cref="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Count"/>.</exception>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Remove(`0)">
            <inheritdoc/>
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>. The value can be <b>null</b> for reference types.</param>
            <returns>
            <b>true</b> if item is successfully removed; otherwise, <b>false</b>. This method also returns <b>false</b> if item was not found in the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.RemoveAt(System.Int32)">
            <inheritdoc/>
            <summary>
            Removes the element at the specified index of the <see cref="T:iTin.Core.Models.Collections.BaseSimpleModelCollection`2"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 - or - index is greater than <see cref="P:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.Count"/>.</exception>
        </member>
        <member name="M:iTin.Core.Models.Collections.BaseSimpleModelCollection`2.SetOwner(`0)">
            <summary>
            Sets this collection as the owner of the specified item.
            </summary>
            <param name="item">Target item to set owner.</param>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownBasicColor">
            <summary>
            Specifies content data type.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Black">
            <summary>
            Gets a system-defined color that has an RGB value of #000000.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Blue">
            <summary>
            Gets a system-defined color that has an RGB value of #0000FF.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Green">
            <summary>
            Gets a system-defined color that has an RGB value of #00FF00.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Cyan">
            <summary>
            Gets a system-defined color that has an RGB value of #00FFFF.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Red">
            <summary>
            Gets a system-defined color that has an RGB value of #FF0000.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Magenta">
            <summary>
            Gets a system-defined color that has an RGB value of #FF00FF.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.Yellow">
            <summary>
            Gets a system-defined color that has an RGB value of #FFFF00.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBasicColor.White">
            <summary>
            Gets a system-defined color that has an RGB value of #FFFFFF.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownBorderColor">
            <summary>
            Represents a known borders value.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownBorderPosition">
            <summary>
            Specifies known border positions
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBorderPosition.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBorderPosition.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBorderPosition.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownBorderPosition.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownCulture">
            <summary>
            Known cultures.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.Current">
            <summary>
            Current culture
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.af">
            <summary>
            Afrikaans
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.afZA">
            <summary>
            Afrikaans (South Africa)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.am">
            <summary>
            Amharic
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.amET">
            <summary>
            Amharic (Ethiopia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ar">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arSA">
            <summary>
            Arabic (Saudi Arabia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arIQ">
            <summary>
            Arabic (Iraq)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arEG">
            <summary>
            Arabic (Egypt)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arLY">
            <summary>
            Arabic (Libya)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arDZ">
            <summary>
            Arabic (Algeria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arMA">
            <summary>
            Arabic (Morocco)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arTN">
            <summary>
            Arabic (Tunisia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arOM">
            <summary>
            Arabic (Oman)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arYE">
            <summary>
            Arabic (Yemen)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arSY">
            <summary>
            Arabic (Syria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arJO">
            <summary>
            Arabic (Jordan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arLB">
            <summary>
            Arabic (Lebanon)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arKW">
            <summary>
            Arabic (Kuwait)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arAE">
            <summary>
            Arabic (U.A.E.)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arBH">
            <summary>
            Arabic (Bahrain)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arQA">
            <summary>
            Arabic (Qatar)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arn">
            <summary>
            Mapudungun
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.arnCL">
            <summary>
            Mapudungun (Chile)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.as">
            <summary>
            Assamese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.asIN">
            <summary>
            Assamese (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.az">
            <summary>
            Azeri
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.azLatnAZ">
            <summary>
            Azeri (Latin, Azerbaijan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.azCyrlAZ">
            <summary>
            Azeri (Cyrillic, Azerbaijan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.azCyrl">
            <summary>
            Azeri (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.azLatn">
            <summary>
            Azeri (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ba">
            <summary>
            Bashkir
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.baRU">
            <summary>
            Bashkir (Russia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.be">
            <summary>
            Belarusian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.beBY">
            <summary>
            Belarusian (Belarus)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bg">
            <summary>
            Bulgarian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bgBG">
            <summary>
            Bulgarian (Bulgaria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bn">
            <summary>
            Bengali
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bnIN">
            <summary>
            Bengali (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bnBD">
            <summary>
            Bengali (Bangladesh)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bo">
            <summary>
            Tibetan
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.boCN">
            <summary>
            Tibetan (PRC)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.br">
            <summary>
            Breton
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.brFR">
            <summary>
            Breton (France)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bsLatnBA">
            <summary>
            Bosnian (Latin, Bosnia and Herzegovina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bsCyrlBA">
            <summary>        
            Bosnian (Cyrillic, Bosnia and Herzegovina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bsCyrl">
            <summary>
            Bosnian (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bsLatn">
            <summary>
            Bosnian (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.bs">
            <summary>
            Bosnian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ca">
            <summary>
            Catalan
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.caES">
            <summary>
            Catalan (Catalan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.co">
            <summary>
            Corsican
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.coFR">
            <summary>
            Corsican (France)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.cs">
            <summary>
            Czech
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.csCZ">
            <summary>
            Czech (Czech Republic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.cy">
            <summary>
            Welsh
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.cyGB">
            <summary>
            Welsh (United Kingdom)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.da">
            <summary>
            Danish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.daDK">
            <summary>
            Danish (Denmark)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.de">
            <summary>
            German
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.deDE">
            <summary>
            German (Germany)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.deCH">
            <summary>
            German (Switzerland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.deAT">
            <summary>
            German (Austria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.deLU">
            <summary>
            German (Luxembourg)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.deLI">
            <summary>
            German (Liechtenstein)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.dsbDE">
            <summary>
            Lower Sorbian (Germany)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.dsb">
            <summary>
            Lower Sorbian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.dv">
            <summary>
            Divehi
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.dvMV">
            <summary>
            Divehi (Maldives)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.el">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.elGR">
            <summary>
            Greek (Greece)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.en">
            <summary>
            English
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enUS">
            <summary>
            English (United States)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enGB">
            <summary>
            English (United Kingdom)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enAU">
            <summary>
            English (Australia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enCA">
            <summary>
            English (Canada)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enNZ">
            <summary>
            English (New Zealand)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enIE">
            <summary>
            English (Ireland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enZA">
            <summary>
            English (South Africa)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enJM">
            <summary>
            English (Jamaica)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.en029">
            <summary>
            English (Caribbean)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enBZ">
            <summary>
            English (Belize)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enTT">
            <summary>
            English (Trinidad and Tobago)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enZW">
            <summary>
            English (Zimbabwe)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enPH">
            <summary>
            English (Republic of the Philippines)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enIN">
            <summary>
            English (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enMY">
            <summary>
            English (Malaysia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.enSG">
            <summary>
            English (Singapore)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.es">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esMX">
            <summary>
            Spanish (Mexico)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esES">
            <summary>
            Spanish (Spain, International Sort)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esGT">
            <summary>
            Spanish (Guatemala)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esCR">
            <summary>
            Spanish (Costa Rica)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esPA">
            <summary>
            Spanish (Panama)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esDO">
            <summary>
            Spanish (Dominican Republic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esVE">
            <summary>
            Spanish (Bolivarian Republic of Venezuela)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esCO">
            <summary>
            Spanish (Colombia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esPE">
            <summary>
            Spanish (Peru)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esAR">
            <summary>
            Spanish (Argentina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esEC">
            <summary>
            Spanish (Ecuador)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esCL">
            <summary>
            Spanish (Chile)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esUY">
            <summary>
            Spanish (Uruguay)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esPY">
            <summary>
            Spanish (Paraguay)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esBO">
            <summary>
            Spanish (Bolivia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esSV">
            <summary>
            Spanish (El Salvador)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esHN">
            <summary>
            Spanish (Honduras)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esNI">
            <summary>
            Spanish (Nicaragua)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esPR">
            <summary>
            Spanish (Puerto Rico)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.esUS">
            <summary>
            Spanish (United States)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.et">
            <summary>
            Estonian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.etEE">
            <summary>
            Estonian (Estonia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.eu">
            <summary>
            Basque
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.euES">
            <summary>
            Basque (Basque)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fa">
            <summary>
            Persian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.faIR">
            <summary>
            Persian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fi">
            <summary>
            Finnish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fiFI">
            <summary>
            Finnish (Finland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fil">
            <summary>
            Filipino
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.filPH">
            <summary>
            Filipino (Philippines)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fo">
            <summary>
            Faroese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.foFO">
            <summary>
            Faroese (Faroe Islands)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fr">
            <summary>
            French
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frFR">
            <summary>
            French (France)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frBE">
            <summary>
            French (Belgium)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frCA">
            <summary>
            French (Canada)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frCH">
            <summary>
            French (Switzerland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frLU">
            <summary>
            French (Luxembourg)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.frMC">
            <summary>
            French (Monaco)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fy">
            <summary>
            Frisian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.fyNL">
            <summary>
            Frisian (Netherlands)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ga">
            <summary>
            Irish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gaIE">
            <summary>
            Irish (Ireland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gd">
            <summary>
            Scottish Gaelic
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gdGB">
            <summary>
            Scottish Gaelic (United Kingdom)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gl">
            <summary>
            Galician
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.glES">
            <summary>
            Galician (Galician)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gsw">
            <summary>
            Alsatian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gswFR">
            <summary>
            Alsatian (France)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.gu">
            <summary>
            Gujarati
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.guIN">
            <summary>
            Gujarati (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ha">
            <summary>
            Hausa
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.haLatnNG">
            <summary>
            Hausa (Latin, Nigeria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.haLatn">
            <summary>
            Hausa (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.he">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.heIL">
            <summary>
            Hebrew (Israel)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hi">
            <summary>
            Hindi
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hiIN">
            <summary>
            Hindi (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hr">
            <summary>
            Croatian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hrHR">
            <summary>
            Croatian (Croatia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hrBA">
            <summary>
            Croatian (Latin, Bosnia and Herzegovina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hsb">
            <summary>
            Upper Sorbian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hsbDE">
            <summary>
            Upper Sorbian (Germany)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hu">
            <summary>
            Hungarian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.huHU">
            <summary>
            Hungarian (Hungary)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hy">
            <summary>
            Armenian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.hyAM">
            <summary>
            Armenian (Armenia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.id">
            <summary>
            Indonesian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.idID">
            <summary>
            Indonesian (Indonesia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ig">
            <summary>
            Igbo
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.igNG">
            <summary>
            Igbo (Nigeria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ii">
            <summary>
            Yi
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iiCN">
            <summary>
            Yi (PRC)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.is">
            <summary>
            Icelandic
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.isIS">
            <summary>
            Icelandic (Iceland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.it">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.itIT">
            <summary>
            Italian (Italy)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.itCH">
            <summary>
            Italian (Switzerland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iu">
            <summary>
            Inuktitut
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iuCansCA">
            <summary>
            Inuktitut (Syllabics, Canada)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iuLatnCA">
            <summary>
            Inuktitut (Latin, Canada)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iuCans">
            <summary>
            Inuktitut (Syllabics)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.iuLatn">
            <summary>
            Inuktitut (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ja">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.jaJP">
            <summary>
            Japanese (Japan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ka">
            <summary>
            Georgian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kaGE">
            <summary>
            Georgian (Georgia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kk">
            <summary>
            Kazakh
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kkKZ">
            <summary>
            Kazakh (Kazakhstan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kl">
            <summary>
            Greenlandic
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.klGL">
            <summary>
            Greenlandic (Greenland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.km">
            <summary>
            Khmer
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kmKH">
            <summary>
            Khmer (Cambodia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kn">
            <summary>
            Kannada
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.knIN">
            <summary>
            Kannada (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ko">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.koKR">
            <summary>
            Korean (Korea)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kok">
            <summary>
            Konkani
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kokIN">
            <summary>
            Konkani (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ky">
            <summary>
            Kyrgyz
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.kyKG">
            <summary>
            Kyrgyz (Kyrgyzstan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lb">
            <summary>
            Luxembourgish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lbLU">
            <summary>
            Luxembourgish (Luxembourg)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lo">
            <summary>
            Lao
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.loLA">
            <summary>
            Lao (Lao P.D.R.)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lt">
            <summary>
            Lithuanian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ltLT">
            <summary>
            Lithuanian (Lithuania)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lv">
            <summary>
            Latvian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.lvLV">
            <summary>
            Latvian (Latvia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mi">
            <summary>
            Maori
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.miNZ">
            <summary>
            Maori (New Zealand)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mk">
            <summary>
            Macedonian (FYROM)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mkMK">
            <summary>
            Macedonian (Former Yugoslav Republic of Macedonia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ml">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mlIN">
            <summary>
            Malayalam (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mn">
            <summary>
            Mongolian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mnMN">
            <summary>
            Mongolian (Cyrillic, Mongolia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mnMongCN">
            <summary>
            Mongolian (Traditional Mongolian, PRC)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mnCyrl">
            <summary>
            Mongolian (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mnMong">
            <summary>
            Mongolian (Traditional Mongolian)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.moh">
            <summary>
            Mohawk
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mohCA">
            <summary>
            Mohawk (Mohawk)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mr">
            <summary>
            Marathi
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mrIN">
            <summary>
            Marathi (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ms">
            <summary>
            Malay
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.msMY">
            <summary>
            Malay (Malaysia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.msBN">
            <summary>
            Malay (Brunei Darussalam)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mt">
            <summary>
            Maltese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.mtMT">
            <summary>
            Maltese (Malta)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.no">
            <summary>
            Norwegian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nbNO">
            <summary>
            Norwegian, Bokmål (Norway)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nb">
            <summary>
            Norwegian (Bokmål)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ne">
            <summary>
            Nepali
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.neNP">
            <summary>
            Nepali (Nepal)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nl">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nlNL">
            <summary>
            Dutch (Netherlands)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nlBE">
            <summary>
            Dutch (Belgium)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nnNO">
            <summary>
            Norwegian, Nynorsk (Norway)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nn">
            <summary>
            Norwegian (Nynorsk)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nso">
            <summary>
            Sesotho sa Leboa
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.nsoZA">
            <summary>
            Sesotho sa Leboa (South Africa)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.oc">
            <summary>
            Occitan
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ocFR">
            <summary>
            Occitan (France)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.or">
            <summary>
            Oriya
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.orIN">
            <summary>
            Oriya (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.pa">
            <summary>
            Punjabi
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.paIN">
            <summary>
            Punjabi (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.pl">
            <summary>
            Polish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.plPL">
            <summary>
            Polish (Poland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.prs">
            <summary>
            Dari
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.prsAF">
            <summary>
            Dari (Afghanistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ps">
            <summary>
            Pashto
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.psAF">
            <summary>
            Pashto (Afghanistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.pt">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ptBR">
            <summary>
            Portuguese (Brazil)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ptPT">
            <summary>
            Portuguese (Portugal)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.qut">
            <summary>
            K'iche
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.qutGT">
            <summary>
            K'iche (Guatemala)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.quz">
            <summary>
            Quechua
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.quzBO">
            <summary>        
            Quechua (Bolivia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.quzEC">
            <summary>
            Quechua (Ecuador)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.quzPE">
            <summary>
            Quechua (Peru)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.rm">
            <summary>
            Romansh
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.rmCH">
            <summary>
            Romansh (Switzerland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ro">
            <summary>
            Romanian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.roRO">
            <summary>
            Romanian (Romania)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ru">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ruRU">
            <summary>
            Russian (Russia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.rw">
            <summary>
            Kinyarwanda
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.rwRW">
            <summary>
            Kinyarwanda (Rwanda)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sa">
            <summary>
            Sanskrit
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.saIN">
            <summary>
            Sanskrit (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sah">
            <summary>
            Yakut
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sahRU">
            <summary>
            Yakut (Russia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.se">
            <summary>
            Sami (Northern)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.seNO">
            <summary>
            Sami, Northern (Norway)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.seSE">
            <summary>
            Sami, Northern (Sweden)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.seFI">
            <summary>
            Sami, Northern (Finland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.si">
            <summary>
            Sinhala
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.siLK">
            <summary>
            Sinhala (Sri Lanka)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sk">
            <summary>
            Slovak
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.skSK">
            <summary>
            Slovak (Slovakia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sl">
            <summary>
            Slovenian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.slSI">
            <summary>
            Slovenian (Slovenia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smaNO">
            <summary>
            Sami, Southern (Norway)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smaSE">
            <summary>
            Sami, Southern (Sweden)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sma">
            <summary>
            Sami (Southern)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smjNO">
            <summary>
            Sami, Lule (Norway)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smjSE">
            <summary>
            Sami, Lule (Sweden)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smj">
            <summary>
            Sami (Lule)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smnFI">
            <summary>
            Sami, Inari (Finland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smn">
            <summary>
            Sami (Inari)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.smsFI">
            <summary>
            Sami, Skolt (Finland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sms">
            <summary>
            Sami (Skolt)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sq">
            <summary>
            Albanian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sqAL">
            <summary>
            Albanian (Albania)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srLatnCS">
            <summary>
            Serbian (Latin, Serbia and Montenegro (Former))
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srCyrlCS">
            <summary>
            Serbian (Cyrillic, Serbia and Montenegro (Former))
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srLatnBA">
            <summary>
            Serbian (Latin, Bosnia and Herzegovina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srCyrlBA">
            <summary>
            Serbian (Cyrillic, Bosnia and Herzegovina)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srLatnRS">
            <summary>
            Serbian (Latin, Serbia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srCyrlRS">
            <summary>
            Serbian (Cyrillic, Serbia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srLatnME">
            <summary>
            Serbian (Latin, Montenegro)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srCyrlME">
            <summary>
            Serbian (Cyrillic, Montenegro)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srCyrl">
            <summary>
            Serbian (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.srLatn">
            <summary>
            Serbian (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sr">
            <summary>
            Serbian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sv">
            <summary>        
            Swedish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.svSE">
            <summary>
            Swedish (Sweden)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.svFI">
            <summary>
            Swedish (Finland)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.sw">
            <summary>
            Kiswahili
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.swKE">
            <summary>
            Kiswahili (Kenya)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.syr">
            <summary>
            Syriac
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.syrSY">
            <summary>
            Syriac (Syria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ta">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.taIN">
            <summary>
            Tamil (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.te">
            <summary>
            Telugu
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.teIN">
            <summary>
            Telugu (India)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tg">
            <summary>
            Tajik
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tgCyrlTJ">
            <summary>
            Tajik (Cyrillic, Tajikistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tgCyrl">
            <summary>        
            Tajik (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.th">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.thTH">
            <summary>
            Thai (Thailand)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tk">
            <summary>
            Turkmen
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tkTM">
            <summary>
            Turkmen (Turkmenistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tn">
            <summary>
            Setswana
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tnZA">
            <summary>
            Setswana (South Africa)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tr">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.trTR">
            <summary>
            Turkish (Turkey)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tt">
            <summary>
            Tatar
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ttRU">
            <summary>
            Tatar (Russia)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tzm">
            <summary>
            Tamazight
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tzmLatnDZ">
            <summary>
            Tamazight (Latin, Algeria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.tzmLatn">
            <summary>
            Tamazight (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ug">
            <summary>
            Uyghur
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ugCN">
            <summary>
            Uyghur (PRC)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uk">
            <summary>
            Ukrainian
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ukUA">
            <summary>
            Ukrainian (Ukraine)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.ur">
            <summary>
            Urdu
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.urPK">
            <summary>
            Urdu (Islamic Republic of Pakistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uz">
            <summary>
            Uzbek
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uzLatnUZ">
            <summary>
            Uzbek (Latin, Uzbekistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uzCyrlUZ">
            <summary>
            Uzbek (Cyrillic, Uzbekistan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uzCyrl">
            <summary>
            Uzbek (Cyrillic)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.uzLatn">
            <summary>
            Uzbek (Latin)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.vi">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.viVN">
            <summary>
            Vietnamese (Vietnam)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.wo">
            <summary>
            Wolof
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.woSN">
            <summary>
            Wolof (Senegal)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.xh">
            <summary>
            isiXhosa
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.xhZA">
            <summary>
            isiXhosa (South Africa)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.yo">
            <summary>
            Yoruba
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.yoNG">
            <summary>
            Yoruba (Nigeria)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhHans">
            <summary>
            Chinese (Simplified)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhTW">
            <summary>
            Chinese (Traditional, Taiwan)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhCN">
            <summary>
            Chinese (Simplified, PRC)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhHK">
            <summary>
            Chinese (Traditional, Hong Kong S.A.R.)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhSG">
            <summary>
            Chinese (Simplified, Singapore)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhMO">
            <summary>
            Chinese (Traditional, Macao S.A.R.)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zh">
            <summary>
            Chinese
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhHant">
            <summary>
            Chinese (Traditional)
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhCHS">
            <summary>
            Chinese (Simplified) Legacy
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zhCHT">
            <summary>
            Chinese (Traditional) Legacy
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zu">
            <summary>
            isiZulu
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownCulture.zuZA">
            <summary>
            isiZulu (South Africa)
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownHorizontalAlignment">
            <summary>
            Specifies how an object or text is horizontally aligned relative to a content
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownHorizontalAlignment.Left">
            <summary>
            Content is aligned horizontally on the left.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownHorizontalAlignment.Center">
            <summary>
            Content is aligned horizontally in the center.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownHorizontalAlignment.Right">
            <summary>
            Content is aligned horizontally on the right.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownLineStyle">
            <summary>
            Specify a line style.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.Continuous">
            <summary>
            Continuous line.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.DashDot">
            <summary>
            Dash-Dot line.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.DashDotDot">
            <summary>
            Dash-Dot-Dot line.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownLineStyle.Dot">
            <summary>
            Dot line.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownVerticalAlignment">
            <summary>
            Specifies how an object or text is vertically aligned relative to a content
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAlignment.Top">
            <summary>
            Content is aligned vertically at the top.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAlignment.Center">
            <summary>
            Content is aligned vertically at the center.
            </summary>        
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAlignment.Bottom">
            <summary>
            Content is aligned vertically at the bottom.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.KnownVerticalAxisPolicy">
            <summary>
            Enumeración que contiene las políticas a aplicar para el eje vertical.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAxisPolicy.Auto">
            <summary>
            Cada serie tiene su popria escala.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAxisPolicy.AutoChoice">
            <summary>
            Establece los valores de ambos ejes verticales de las series al que sea mayor de los dos.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAxisPolicy.ReferenceToPrimaryVerticalAxis">
            <summary>
            Establece los valores del eje vertical primario en el eje vertical secundario de la serie.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.KnownVerticalAxisPolicy.ReferenceToSecondaryVerticalAxis">
            <summary>
            Establece los valores del eje vertical secundario en el eje vertical primario de la serie.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Enums.YesNo">
            <summary>
            Represents a boolean value.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.YesNo.Yes">
            <summary>
            Represents the boolean value <b>true</b>.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.Design.Enums.YesNo.No">
            <summary>
            Represents the boolean value <b>false</b>.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.YesNoExtensions">
            <summary>
            Extensions methods for <see cref="T:iTin.Core.Models.Design.Enums.YesNo"/> enumerated type. 
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.YesNoExtensions.AsBoolean(iTin.Core.Models.Design.Enums.YesNo)">
            <summary>
            Converts a value of the enumerated type <see cref="T:iTin.Core.Models.Design.Enums.YesNo"/> to boolean representation.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>
            <b>true</b> if value is <b>Yes</b>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Design.ICombinable`1">
            <summary>
            Defines a generic interface that defines an element can be combined with another element of the same type
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.ICombinable`1.Combine(`0)">
            <summary>
            Combines this instance with reference parameter.
            </summary>
            <param name="reference">Target Reference</param>
        </member>
        <member name="T:iTin.Core.Models.Design.IOwner">
            <summary>
            Defines a generic interface that defines an element can be owner another reference.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.IParent">
            <summary>
            Defines a generic interface that defines an element can be parent another reference.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.Options.BaseOptions">
            <summary>
            Base class for model option elements. 
            </summary>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.BaseOptions.IsDefault">
            <summary>
            When overridden in a derived class, gets a value indicating whether this instance contains the default.
            </summary>
            <value>
            <strong>true</strong> if this instance contains the default; otherwise, <strong>false</strong>.
            </value>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.BaseOptions.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current object.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Design.Options.FontOptions">
            <summary>
            Defines a set of options that we can use to quickly adjust an existing <see cref="T:iTin.Core.Models.Design.FontModel"/> model.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.FontOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Design.Options.FontOptions"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.FontOptions.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Default">
            <summary>
            Gets a reference that contains the set of available settings to model an existing <see cref="T:iTin.Core.Models.Design.FontModel"/>.
            </summary>
            <value>
            A <see cref="T:iTin.Core.Models.Design.Options.FontOptions"/> reference containing the set of available settings.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.IsDefault">
            <inheritdoc />
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Bold">
            <summary>
            Gets or sets a value indicating whether bold style is applied in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model, <b>YesNo.Yes</b> if bold style is applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance or <b>YesNo.No</b> if bold style is not applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. 
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Color">
            <summary>
            Gets or sets the preferred font color in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/>" instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            Preferred font color.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.IsScalable">
            <summary>
            Gets or sets a value indicating whether a existing <see cref="T:iTin.Core.Models.Design.FontModel"/> instance is scalable.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model, <b>YesNo.Yes</b> if <see cref="T:iTin.Core.Models.Design.FontModel"/> instance is scalable or <b>YesNo.No</b> if <see cref="T:iTin.Core.Models.Design.FontModel"/> instance is not scalable. 
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Italic">
            <summary>
            Gets or sets a value indicating whether italic style is applied in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model, <b>YesNo.Yes</b> if italic style is applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance or <b>YesNo.No</b> if italic style is not applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. 
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Name">
            <summary>
            Gets or sets the preferred font name in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/>" instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            Preferred font name.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Size">
            <summary>
            Gets or sets the preferred font size in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/>" instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            Preferred font size.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.FontOptions.Underline">
            <summary>
            Gets or sets a value indicating whether underline style is applied in an existing <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model, <b>YesNo.Yes</b> if underline style is applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance or <b>YesNo.No</b> if underline style is not applied to a <see cref="T:iTin.Core.Models.Design.FontModel"/> instance. 
            </value>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.FontOptions.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Design.Options.ShadowOptions">
            <summary>
            Defines a set of options that we can use to quickly adjust an existing <see cref="T:iTin.Core.Models.Design.Shadow"/> instance.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.ShadowOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Design.Options.ShadowOptions"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.ShadowOptions.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.ShadowOptions.Default">
            <summary>
            Gets a reference that contains the set of available settings to model an existing <see cref="T:iTin.Core.Models.Design.Shadow"/> instance.
            </summary>
            <value>
            Set of default options.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.ShadowOptions.IsDefault">
            <inheritdoc />
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.ShadowOptions.Color">
            <summary>
            Gets or sets the preferred color in an existing <see cref="T:iTin.Core.Models.Design.Shadow"/>" instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            Preferred shadow color.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.ShadowOptions.Offset">
            <summary>
            Gets or sets a value that contains the shadow shift, expressed in pixels in an existing <see cref="T:iTin.Core.Models.Design.Shadow"/> instance. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model or an <see cref="T:System.Int32" /> value that represents the shadow displacement, in pixels.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Options.ShadowOptions.Show">
            <summary>
            Gets or sets a value that indicates whether an existing. The default value is <b>(null)</b>, Nothing in Visual Basic.
            </summary>
            <value>
            <b>null</b>, (Nothing in Visual Basic) do not modify the value of the reference model, <b>YesNo.Yes</b> if the instance is displayed or <b>YesNo.No</b> if the instance is not displayed. 
            </value>
        </member>
        <member name="M:iTin.Core.Models.Design.Options.ShadowOptions.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:iTin.Core.Models.Design.FontModel">
            <summary>
            Represents a font. Defines a particular format for text, including font face, size, and style attributes.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Design.FontModel"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.iTin#Core#Models#Design#ICombinable{iTin#Core#Models#Design#FontModel}#Combine(iTin.Core.Models.Design.FontModel)">
            <summary>
            Combines this instance with reference parameter.
            </summary>
            <param name="reference">Reference pattern</param>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.DefaultFont">
            <summary>
            Gets default font settings.
            </summary>
            <value>
            A <see cref="T:iTin.Core.Models.Design.FontModel"/> reference containing the default font settings.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.FontStyles">
            <summary>
            Gets a value that represents the different styles defined for this font.
            </summary>
            <value>
            A <see cref="T:System.Drawing.FontStyle"/> value that represents the different styles defined for this font.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Name">
            <summary>
            Gets or sets preferred font name. The default is <b>Segoe UI</b>.
            </summary>
            <value>
            Preferred font name. If specified a font name not existent be use the default font. 
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Size">
            <summary>
            Gets or sets preferred font size. The default is <b>10.0</b>.
            </summary>
            <value>
            Preferred font size.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than of valid value.</exception>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Color">
            <summary>
            Gets or sets preferred font color. The default is <b>Black</b>.
            </summary>
            <value>
            Preferred font color.
            </value>
            <exception cref="T:System.ArgumentNullException">The value specified is <b>null</b>.</exception>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.IsScalable">
            <summary>
            Gets or sets a value indicating whether this font is scalable. The default is <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/>.
            </summary>
            <value>
            <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/> if font is scalable; otherwise, <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Bold">
            <summary>
            Gets or sets a value indicating whether bold style is applied for this font. The default is <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </summary>
            <value>
            <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/> if bold style is applied for this font; otherwise, <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Italic">
            <summary>
            Gets or sets a value indicating whether italic style is applied for this font. The default is <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </summary>
            <value>
            <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/> if italic style is applied for this font; otherwise, <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.Underline">
            <summary>
            Gets or sets a value indicating whether the underline style is applied for this font. The default is <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </summary>
            <value>
            <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/> if the underline style is applied for this font; otherwise, <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.FontModel.IsDefault">
            <inheritdoc />
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.GetColor">
            <summary>
            Gets a reference to the <see cref="T:System.Drawing.Color" /> structure preferred for this font.
            </summary>
            <returns>
            <see cref="T:System.Drawing.Color"/> structure that represents a .NET color.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.ToFont">
            <summary>
            Gets a reference to native .NET font representing the font model
            </summary>
            <returns>
            Native .NET font representing the font model
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.ApplyOptions(iTin.Core.Models.Design.Options.FontOptions)">
            <summary>
            Apply specified options to this font.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.Combine(iTin.Core.Models.Design.FontModel)">
            <summary>
            Combines this instance with reference parameter.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.FontModel.IsValidFontName(System.String)">
            <summary>
            Gets a value indicating whether the font is installed on this system.
            </summary>
            <param name="fontName">Font to check.</param>
            <returns>
            <strong>true</strong> if the font is installed on the system; otherwise, <strong>false</strong>.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Design.Shadow">
            <summary>
            Represents the visual setting of border's shadow. Includes the shadow color and visibility.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Design.Shadow"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.iTin#Core#Models#Design#ICombinable{iTin#Core#Models#Design#Shadow}#Combine(iTin.Core.Models.Design.Shadow)">
            <summary>
            Combines this instance with reference parameter.
            </summary>
            <param name="reference">Reference pattern</param>
        </member>
        <member name="P:iTin.Core.Models.Design.Shadow.Default">
            <summary>
            Returns a new instance containing default shadow settings.
            </summary>
            <value>
            A <see cref="T:iTin.Core.Models.Design.Shadow"/> reference containing the default shadow settings.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Shadow.Color">
            <summary>
            Gets or sets preferred shadow color. The default is <b>LightGray</b>.
            </summary>
            <value>
            Preferred shadow color.
            </value>
            <exception cref="T:System.ArgumentNullException">The value specified is <b>null</b>.</exception>
        </member>
        <member name="P:iTin.Core.Models.Design.Shadow.Offset">
            <summary>
            Gets or sets the shadow shift, in pixels. The default is <b>2</b>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> value that represents the shadow displacement, in pixels.
            </value>
        </member>
        <member name="P:iTin.Core.Models.Design.Shadow.Show">
            <summary>
            Gets or sets a value that determines whether displays shadow. The default is <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </summary>
            <value>
            <see cref="F:iTin.Core.Models.Design.Enums.YesNo.Yes"/> if display shadow; otherwise, <see cref="F:iTin.Core.Models.Design.Enums.YesNo.No"/>.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is outside the range of valid values.</exception>
        </member>
        <member name="P:iTin.Core.Models.Design.Shadow.IsDefault">
            <inheritdoc/>
            <summary>
            Gets a value indicating whether this instance is default.
            </summary>
            <value>
            <b>true</b> if this instance contains the default; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.GetColor">
            <summary>
            Gets a reference to the <see cref="T:System.Drawing.Color"/> structure preferred for shadow color.
            </summary>
            <returns>
            <see cref="T:System.Drawing.Color"/> structure that represents a .NET color.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.ApplyOptions(iTin.Core.Models.Design.Options.ShadowOptions)">
            <summary>
            Apply specified options to this instance.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Shadow.Combine(iTin.Core.Models.Design.Shadow)">
            <summary>
            Combines this instance with reference parameter.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.Design.ColorExtensions">
            <summary>
            Static class than contains extension methods for structures of type <see cref="T:System.Drawing.Color"/>.
            </summary> 
        </member>
        <member name="M:iTin.Core.Models.Design.ColorExtensions.ToHex(System.Drawing.Color)">
            <summary>
            Gets the hexadecimal encoding of a color.
            </summary>
            <param name="value">color to convert.</param>
            <returns>
            An hexadecimal <see cref="T:System.String"/> than represents the color.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Design.Helpers.ColorHelper">
            <summary> 
            Static class that contains methods for manipulating structures of type <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.GetColorFromString(System.String)">
             <summary>
             Returns a new <see cref="T:System.Drawing.Color"/> structure from its name, its hexdecimal encoding or from color space definition.
             </summary>
             <param name="value">A <see cref="T:System.String" /> that represents the color to convert.</param>
             <returns>
             Creates a new <see cref="T:System.Drawing.Color" /> structure from the specified string color.
             </returns>
             <remarks>
             The <paramref name="value"/> parameter may contain:
             <list type="table">
               <item>
                 <description>A color name, such as <see cref="P:System.Drawing.Color.Black"/>, <see cref="P:System.Drawing.Color.Red"/>.</description>
               </item>
               <item>
                 <description>A hexadecimal RGB color encoding preceded by the character <strong>#</strong>, such as <strong>#00FF00</strong>, <strong>#00FFFF</strong>.</description>
               </item>
               <item>
                 <description>
                   A space color definition, for this has to precede the color string with this string <strong>sc#</strong>.
                   <para>for example <strong>sc# 0.15 0.15 0.15</strong>, where the three color components (RGB) are set to 15% of its maximum value, producing a very light gray. 
                   Each component has to be between <strong>0.0</strong> and <strong>1.0</strong>.</para>    
                 </description>
               </item>
              </list>
             </remarks>
             <example>
             The following code example, we obtain three different ways the same color, the color <see cref="P:System.Drawing.Color.Black"/>.
             <code lang="cs">
               using System;   
               using System.Drawing;
             
               using iTin.Core.Helpers;
             
               class ColorTestClass   
               {   
                   static int Main()   
                   {
                        // From color name.
                        Color fromColorName = ColorHelper.GetColorFromString("Black");
            
                        // From hexadecimal.
                        Color fromHexString = ColorHelper.GetColorFromString("#000000");
             
                        // From space color.
                        Color fromSpace = ColorHelper.GetColorFromString("sc: 0.0 0.0 0.0");
                   }
               }   
              </code>
             </example>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.MergeColors(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
            <summary>
            Combine two colors with relative percentages.
            </summary>
            <param name="color1">First color.</param>
            <param name="percent1">Percentage of the first color.</param>
            <param name="color2">Second color</param>
            <param name="percent2">Percentage of the second color.</param>
            <returns>
            Returns a new <see cref="T:System.Drawing.Color" /> structure as result of the combination.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.MergeColors(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
            <summary>
            Combinar tres colores con porcentajes relativos.
            </summary>
            <param name="color1">First color.</param>
            <param name="percent1">Percentage of the first color.</param>
            <param name="color2">Second color</param>
            <param name="percent2">Percentage of the second color.</param>
            <param name="color3">Third color.</param>
            <param name="percent3">Percentage of the third color.</param>
            <returns>
            Returns a new <see cref="T:System.Drawing.Color" /> structure as result of the combination.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.ToHtmlColor(System.Drawing.Color)">
            <summary>
            Converts specified color to html color string.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> structure to convert.</param>
            <returns>
            Returns a new <see cref="T:System.String"/> thats constains converted color.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.ToGray(System.Drawing.Color)">
            <summary>
            Converts specified color to grayscale.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> structure to convert.</param>
            <returns>
            Returns a new <see cref="T:System.Drawing.Color"/> structure converted to grayscale.
            </returns>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.ToHex(System.Drawing.Color)">
            <summary>
            Returns the hexadecimal encoding of a color.
            </summary>
            <param name="value"><see cref="T:System.Drawing.Color"/> structure to convert.</param>
            <returns>
            A hexadecimal <see cref="T:System.String" /> representing color.
            </returns>
            <example>
            The following code example, we obtain hexadecimal code for white color without chararacter <strong>#</strong>. The result is <strong>FFFFFF</strong>.
            <code lang="cs">
              using System;   
              using System.Drawing;
            
              using iTin.Core.Drawing.Helpers;
            
              class ColorTestClass   
              {   
                  static int Main()   
                  {
                       // From color name.
                       string hexColorString = ColorHelper.GetColorFromString(Color.White);
                       
                       // Print result.
                       Console.WriteLine("The hexadecimal representation of the color white is {0}", hexColorString); 
                  }
              }   
             </code>
            </example>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.ToTransparencyLevel(System.Drawing.Color,System.Int32)">
            <summary>
            Sets transparency level of specified color.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> structure to convert.</param>
            <param name="opacity">The level of transparency applied. The value must be between 0 and 255.</param>
            <returns>
            Returns a new <see cref="T:System.Drawing.Color"/> structure with specified transparency level.
            </returns>
            <remarks>
            If the value is outside the limits, not makes no changes.
            </remarks>
        </member>
        <member name="M:iTin.Core.Models.Design.Helpers.ColorHelper.FromSpaceColor(System.String)">
            <summary>
            A color obtained from the color percentage of each of its components.
            </summary>
            <param name="value">A <see cref="T:System.String" /> that represents the color to convert.</param>
            <returns>
            Creates a <see cref="T:System.Drawing.Color" /> structure from the specified string color.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.Properties">
            <summary>
            Defines a user-custom property.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Properties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.Properties"/> class.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Properties.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:iTin.Core.Models.Properties.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:iTin.Core.Models.Properties.IsReadOnly">
            <inheritdoc />
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:iTin.Core.Models.Properties.IsDefault">
            <inheritdoc />
        </member>
        <member name="P:iTin.Core.Models.Properties.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:iTin.Core.Models.Properties.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.Add(iTin.Core.Models.Property)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:iTin.Core.Models.Properties.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Properties.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.Contains(iTin.Core.Models.Property)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.IndexOf(iTin.Core.Models.Property)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.Insert(System.Int32,iTin.Core.Models.Property)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:iTin.Core.Models.Properties.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:iTin.Core.Models.Properties.CopyTo(iTin.Core.Models.Property[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:iTin.Core.Models.Properties.Remove(iTin.Core.Models.Property)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:iTin.Core.Models.Properties.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:iTin.Core.Models.Property">
            <summary>
            Defines a user custom property.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Property.System#ICloneable#Clone">
            <inheritdoc />
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:iTin.Core.Models.Property.Name">
            <summary>
            Gets or sets the custom property name.
            </summary>
            <value>
            Property name
            </value>
        </member>
        <member name="P:iTin.Core.Models.Property.Value">
            <summary>
            Gets or sets the custom property value.
            </summary>
            <value>
            Property value
            </value>
        </member>
        <member name="P:iTin.Core.Models.Property.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:iTin.Core.Models.Property.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:iTin.Core.Models.Property.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current object.
            </returns>
        </member>
        <member name="T:iTin.Core.Models.KnownFileFormat">
            <summary>
            Defines input file format for model imports
            </summary>
        </member>
        <member name="F:iTin.Core.Models.KnownFileFormat.Xml">
            <summary>
            File format is <b>XML</b>.
            </summary>
        </member>
        <member name="F:iTin.Core.Models.KnownFileFormat.Json">
            <summary>
            File format is <b>XML</b>.
            </summary>
        </member>
        <member name="T:iTin.Core.Models.ModelSaveOptions">
            <summary>
            Defines file save options. Allows defining if the directory is created automatically if it does not exist, output document without indentation. 
            By defaults uses <b>UTF8</b> encoding.
            </summary>
        </member>
        <member name="M:iTin.Core.Models.ModelSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iTin.Core.Models.ModelSaveOptions" /> class.
            </summary>
        </member>
        <member name="P:iTin.Core.Models.ModelSaveOptions.Default">
            <summary>
            Gets a reference that contains default options for save, by default it creates the directory if it does not exist.
            </summary>
            <value>
            A <see cref="T:iTin.Core.Models.ModelSaveOptions"/> that contains default options for save.
            </value>
        </member>
        <member name="P:iTin.Core.Models.ModelSaveOptions.CreateFolderIfNotExist">
            <summary>
            Gets or sets a value that indicates whether the directory should be created if it does not exist.
            </summary>
            <value>
            <b>true</b> if directory should be created; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.ModelSaveOptions.Encoding">
            <summary>
            Gets or sets a value that indicates whether the directory should be created if it does not exist.
            </summary>
            <value>
            <b>true</b> if directory should be created; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:iTin.Core.Models.ModelSaveOptions.Indent">
            <summary>
            Gets or sets a value that indicates whether the directory should be created if it does not exist.
            </summary>
            <value>
            <b>true</b> if directory should be created; otherwise <b>false</b>.
            </value>
        </member>
        <member name="M:iTin.Core.Models.ModelSaveOptions.ToSaveOptions">
            <summary>
            Convert this options to new <see cref="T:iTin.Core.ComponentModel.SaveOptions"/> instance.
            </summary>
            <value>
            A <see cref="T:iTin.Core.ComponentModel.SaveOptions"/> reference.
            </value>
        </member>
    </members>
</doc>
